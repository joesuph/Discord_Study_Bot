# -*- coding: utf-8 -*-
"""Discord Bot

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AyFYJnORHmUPt0YTypJUW6RkQJmU-qNt

#Install Dependicies
"""

import discord
import time
import re
import asyncio
import nest_asyncio

packs = {}
listening=False
listening_pack=None
definition = None
term = None

def addPack(pack_name):
  if pack_name in packs:
    already_exists = True
  else:
    already_exists = False
    packs[pack_name] = []
  return already_exists

def resetTerm():
  global definition, term
  definition = None
  term = None


client = discord.Client()
bot_token = 'NjExOTgyNDEzMjk5NzEyMDAw.XXM4Ew.xYD4bkl8e0iZhY70Swc2knv1dqA'

"""#Write code for bot"""

nest_asyncio.apply()

@client.event
async def on_ready():
  print(f'We have logged in as {client.user}')

@client.event
async def on_message(message):
  global listening, listening_pack, definition, term
  text = message.content.lower()
  #Create Pack
  if "create pack:" in text:
    pack_name = re.split('.*create pack:',text)[1].strip()
    pack_exists = addPack(pack_name)
    if pack_exists:
      await message.channel.send(f'packname \'{pack_name}\' already exists')
    else:
      await message.channel.send(f'packname \'{pack_name}\' has been created')

  #Show pack
  if "show pack:" in text:
    pack_name = re.split('.*show pack:',text)[1].strip()
    print(pack_name)
    if pack_name in packs:
      if packs[pack_name]:
        display_text = ''
        for i in range(len(packs[pack_name])):
          card = packs[pack_name][i]
          display_text += f'{i}:[{card[0]}\t\t=>\t\t{card[1]}]\n\n'
        await message.channel.send(display_text)
      else:
        await message.channel.send(f'{pack_name} is empty')
    else:
      await message.channel.send(f'{pack_name} does not exist')

  #Add card to pack
  if re.match("^add to.*",text):
    pack_name = re.split('.*add to ',text)[1].strip()
    if pack_name in packs:
      listening = True
      listening_pack= pack_name
      await message.channel.send('Now listening, to add card send two messages\n 1. \'term: <your term>\'\n2. \'def: <your definition>\'')
  
  #Add term
  if re.match('^term:.*',text):
    term = re.split('^term:',text)[1].strip()
    await message.channel.send('Term added to card, now set definition for card')

  #Add definition
  if re.match('^def:.*',text):
    definition = re.split('^def:',text)[1].strip()
    await message.channel.send(f'Definition added to card \n if \n[{term}\t\t=>\t\t{definition}]\n is correct, text \'add\' to add card to {listening_pack}\n if not reset term or def')    
  
  #Add card details
  if listening and text=='add':
    if definition is None or term is None:
      await message.channel.send('Term or definition has not been added yet')
    else:
      await message.channel.send(f'Added [{term}\t\t=>\t\t{definition}] to {listening_pack}')
      packs[listening_pack].append([term,definition])
      resetTerm()
  
  #Turn off QuizFish  
  if 'go away quizfish' in message.content.lower():
    print('Bot has logged out')
    await client.close()

client.run(bot_token)